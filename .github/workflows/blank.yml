# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
  - cron: "0 14 * * 2"
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: GetLatestTweet
        env:
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
          CONVERSATION_ID: "1257772297475276800"
        run: |
          echo "Looking for latest tweet in conversation $CONVERSATION_ID"
          export latestTweet=$(curl -s --request GET \
           --url "https://api.twitter.com/2/tweets/search/recent?query=conversation_id:$CONVERSATION_ID&tweet.fields=in_reply_to_user_id,author_id,created_at,conversation_id" \
           --header "Authorization: Bearer $BEARER_TOKEN" | jq '.meta.newest_id as $new | .data | map(select(.id==$new ))[0].id')
          echo "latestTweetID: $latestTweet"
          echo "::set-env name=latestTweet::$latestTweet"
     
     #caching would be nice, but they evict after 7 days...
     
     #I would prefer to use the ubuntu packages, but github actions preinstall v4, which is incompatible with the aptitiude versions
      - name: RTest
        env:
          R_LIBS_USER: /home/runner/work/_temp/Library
        if: ${{ true }}
        run: |
          sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev
          mkdir -p $R_LIBS_USER
          Rscript -e "install.packages(\"tidyverse\", lib=\"$R_LIBS_USER\")"
          Rscript 'covid cubic.R'

      - name: Tweet
        env:
          CLIENT_KEY: ${{ secrets.CLIENT_KEY }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          RESOURCE_KEY: ${{ secrets.RESOURCE_KEY }}
          RESOURCE_SECRET: ${{ secrets.RESOURCE_SECRET }}
        run: |
          echo "latestTweet: $latestTweet"
          pip install requests_oauthlib
          python3 twitter.py

      - uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            test.txt
            out.png
          
